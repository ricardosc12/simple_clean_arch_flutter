// {
// Place your flutter_application_1 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
// Placeholders with the same ids are connected.
// Example:
// "Print to console": {
// 	"scope": "javascript,typescript",
// 	"prefix": "log",
// 	"body": [
// 		"console.log('$1');",
// 		"$2"
// 	],
// 	"description": "Log output to console"
// }
// }
{
	"form_controller": {
		"prefix": "f_form_controller",
		"scope": "dart",
		"body": [
			"import 'package:flutter_application_1/shared/domain/dto/form_schema.dart';",
			"import 'package:flutter_application_1/shared/log/log_service.dart';",
			"import 'package:flutter_application_1/shared/presentation/form_controller.dart';",
			"import 'package:flutter_riverpod/flutter_riverpod.dart';",
			"import 'package:luthor/luthor.dart';",
			"",
			"enum $1Fields { arg1, arg2, arg3 }",
			"",
			"abstract class $1Schema {",
			"  static final Map<$1Fields, Validator> validators = {",
			"    $1Fields.arg1: l",
			"        .string(message: \"Arg1 deve ser uma string\")",
			"        .min(1, message: \"Arg1 obrigatório\")",
			"        .required(message: \"Arg1 obrigatório\"),",
			"    $1Fields.arg2: l.int(",
			"      message: \"Arg2 deve ser um inteiro\",",
			"    ).required(message: \"Senha obrigatória\"),",
			"    $1Fields.arg3: l",
			"        .string(message: \"Arg3 deve ser uma data válida\")",
			"        .dateTime(message: \"Arg3 deve ser uma data válida\")",
			"        .required(message: \"Data obrigatória\"),",
			"  };",
			"",
			"  static FormValidation? validator($1Fields field) {",
			"    return formValidator(validators[field]);",
			"  }",
			"}",
			"",
			"class $1FormController extends FormController<$2> {",
			"  $1FormController({required super.onSuccess});",
			"",
			"  @override",
			"  Future<FormStatus> submit() async {",
			"    try {",
			"      final state = formKey.currentState;",
			"",
			"      if (state == null || !state.saveAndValidate()) {",
			"        return FormStatus.invalid;",
			"      }",
			"",
			"      final values = state.value;",
			"",
			"      onSuccess($2.fromJson(values));",
			"      return FormStatus.submitted;",
			"    } catch (e) {",
			"      LogService.logger.error(e);",
			"      return FormStatus.error;",
			"    }",
			"  }",
			"}",
			"",
			"final form$1Provider = Provider<$1FormController>((ref) {",
			"  return $1FormController(onSuccess: (dto){});",
			"});",
		],
		"description": "Form Controller"
	},
	"form_schema": {
		"prefix": "f_form_schema",
		"scope": "dart",
		"body": [
			"import 'package:flutter_application_1/shared/domain/dto/form_schema.dart';",
			"import 'package:luthor/luthor.dart';",
			"",
			"enum $1Fields { arg1, arg2, arg3 }",
			"",
			"abstract class $1Schema {",
			"  static final Map<$1Fields, Validator> validators = {",
			"    $1Fields.arg1: l",
			"        .string(message: \"Arg1 deve ser uma string\")",
			"        .min(1, message: \"Arg1 obrigatório\")",
			"        .required(message: \"Arg1 obrigatório\"),",
			"    $1Fields.arg2: l.int(",
			"      message: \"Arg2 deve ser um inteiro\",",
			"    ).required(message: \"Senha obrigatória\"),",
			"    $1Fields.arg3: l",
			"        .string(message: \"Arg3 deve ser uma data válida\")",
			"        .dateTime(message: \"Arg3 deve ser uma data válida\")",
			"        .required(message: \"Data obrigatória\"),",
			"  };",
			"",
			"  static FormValidation? validator($1Fields field) {",
			"    return formValidator(validators[field]);",
			"  }",
			"}"
		],
		"description": "Form Schema"
	}
}