// {
// Place your flutter_application_1 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
// Placeholders with the same ids are connected.
// Example:
// "Print to console": {
// 	"scope": "javascript,typescript",
// 	"prefix": "log",
// 	"body": [
// 		"console.log('$1');",
// 		"$2"
// 	],
// 	"description": "Log output to console"
// }
// }
{
	"form_controller": {
		"prefix": "f_form_controller",
		"scope": "dart",
		"body": [
			"import 'package:flutter/material.dart';",
			"import 'package:flutter_application_1/shared/presentation/form_controller.dart';",
			"import 'package:form_builder_validators/form_builder_validators.dart';",
			"",
			"enum $1Fields { login, password }",
			"abstract class $1Schema {",
			"  static final Map<$1Fields, FormFieldValidator<String?>> validators = {",
			"    $1Fields.login: FormBuilderValidators.compose([",
			"      FormBuilderValidators.required(errorText: \"CPF obrigat贸rio\"),",
			"      FormBuilderValidators.min(0, errorText: \"CPF obrigat贸rio\"),",
			"    ]),",
			"    $1Fields.password: FormBuilderValidators.compose([",
			"      FormBuilderValidators.required(errorText: \"Senha obrigat贸ria\"),",
			"      FormBuilderValidators.min(0, errorText: \"Senha obrigat贸ria\"),",
			"    ]),",
			"  };",
			"",
			"  static FormFieldValidator<String?>? validator($1Fields field) {",
			"    return validators[field];",
			"  }",
			"}",
			"class $1FormController extends FormController<Login$1Dto> {",
			"  $1FormController({required super.onSuccess});",
			"",
			"  @override",
			"  void submit() {",
			"    try {",
			"      final state = formKey.currentState;",
			"",
			"      if (state == null || !state.saveAndValidate()) {",
			"        return;",
			"      }",
			"",
			"      final values = state.value;",
			"",
			"      onSuccess(",
			"        Login$1Dto(",
			"          login: values[$1Fields.login.name],",
			"          password: values[$1Fields.password.name],",
			"        ),",
			"      );",
			"    } catch (e) {",
			"      // LOG: Sistema de Log",
			"      print(e);",
			"      return;",
			"    }",
			"  }",
			"}"
		],
		"description": "Form Controller"
	}
}